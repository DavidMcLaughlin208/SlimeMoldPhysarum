#version 440

struct Cell {
	vec4 val;
};

uniform int screenWidth;
uniform int screenHeight;
uniform float decayRate;
uniform float diffuseRate;

layout(binding = 1) buffer oldTrail {
	Cell oldTrailMap[];
};

layout(binding = 2) buffer newTrail {
	Cell newTrailMap[];
};

float lerp(float to, float from, float weight) {
	return from + (to - from) * weight;
}

vec4 lerpVec4(vec4 to, vec4 from, float weight) {
	float r = max(0, lerp(to.r, from.r, weight) - decayRate);
	float g = max(0, lerp(to.g, from.g, weight) - decayRate);
	float b = max(0, lerp(to.b, from.b, weight) - decayRate);
	float a = max(0, lerp(to.a, from.a, weight) - decayRate);
	return vec4(r, g, b, a);
}


layout(local_size_x = 100, local_size_y = 1, local_size_z = 1) in;
void main() {
	// Modify Trail
	int y = int(gl_GlobalInvocationID.x) / screenWidth;
	int x = int(gl_GlobalInvocationID.x) - y * screenWidth;
	
	vec4 sum = vec4(0, 0, 0, 0);
	for (int modX = -1; modX <= 1; modX++) {
		int targetX = x + modX;
		if (targetX < 0 || targetX > screenWidth - 1) {
			continue;
		}
		for (int modY = -1; modY <= 1; modY++) {
			int targetY = y + modY;
			if (targetY < 0 || targetY > screenHeight - 1) {
				continue;
			}
			int index = targetX + (targetY * screenWidth);
			sum += oldTrailMap[index].val;
		}
	}

	vec4 to = sum / float(9);
	int index = x + (y * screenWidth);
	vec4 from = oldTrailMap[index].val;
	newTrailMap[gl_GlobalInvocationID.x].val = lerpVec4(to, from, diffuseRate);
}